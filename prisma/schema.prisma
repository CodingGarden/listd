generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator-markdown"
  output   = "./ERD.md"
}

model User {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  lists         List[]
  settings      UserSettings?
}

enum ColorScheme {
  System
  Dark
  Light
}

model UserSettings {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  onboarded   Boolean     @default(false)
  colorScheme ColorScheme @default(System)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @unique @db.Uuid
  locale      Locale      @relation(fields: [localeId], references: [id], onDelete: Cascade)
  localeId    String      @db.VarChar(15)
}

model Locale {
  id           String         @unique @db.VarChar(15)
  languageCode String
  countryCode  String?
  script       String?
  formalName   String
  nativeName   String
  commonName   String?
  UserSettings UserSettings[]
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken") @db.Text
  access_token      String? @map("accessToken") @db.Text
  expires_in        Int?    @map("expiresIn")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken") @db.Text
  session_state     String? @map("sessionState")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Visibility {
  Public
  Unlisted
  Private
}

model List {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String?
  visibility  Visibility
  creator     User       @relation(fields: [userId], references: [id])
  userId      String     @db.Uuid
  items       ListItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum ListItemType {
  YouTubeChannel
}

model ListItem {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  meta           ListItemMeta @relation(fields: [listItemMetaId], references: [id])
  list           List         @relation(fields: [listId], references: [id])
  listId         String       @db.Uuid
  listItemMetaId String       @db.Uuid
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model ListItemMeta {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  originId            String
  imageUrl            String
  type                ListItemType
  youtubeMeta         YouTubeMeta? @relation(fields: [youTubeMetaOriginId], references: [originId])
  listItem            ListItem[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  youTubeMetaOriginId String?

  @@unique([originId, type])
}

model YouTubeMeta {
  originId        String         @unique
  name            String
  description     String
  subscriberCount Int
  avatarUrl       String
  bannerUrl       String?
  customUrl       String
  isVerified      Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  ListItemMeta    ListItemMeta[]
}
